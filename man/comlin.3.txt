COMLIN(3)
=======
:doctype: manpage


== NAME

comlin - Command Line Option Parser Library


== VERSION

Comlin Lib 0.1 (2018-10-27)


== INTERFACE

*Option specification*
....
  #cl_command( prog,author,year,... )
  #cl_maincmd( prog,author,year,... )
  #cl_subcmd( name,parentname,... )
  void cl_finish( void );
  void cl_end( void );
....


*Option queries*
....
  cl_opt_t cl_opt( char* name );
  char**   cl_value( char* name );
  cl_opt_t cl_given( char* name );
  cl_opt_t cl_cmd_opt( cl_cmd_t cmd, char* name );
  char**   cl_cmd_value( cl_cmd_t cmd, char* name );
  cl_opt_t cl_cmd_given( cl_cmd_t cmd, char* name );
  cl_cmd_t cl_cmd_subcmd( cl_cmd_t, char* name );
  cl_cmd_t cl_given_subcmd( void );
  cl_cmd_t cl_cmd_given_subcmd( cl_cmd_t parent );
....


*Configuration option setting functions*
....
  void cl_conf_autohelp( mc_bool_t val );
  void cl_conf_header( char* val );
  void cl_conf_footer( char* val );
  void cl_conf_subcheck( mc_bool_t val );
  void cl_conf_check_missing( mc_bool_t val );
  void cl_conf_check_invalid( mc_bool_t val );
  void cl_conf_tab( int val );
  void cl_conf_help_exit( mc_bool_t val );
....


*Generic functions*
....
  void cl_error( const char* format, ... );
  void cl_usage( void );
  void cl_cmd_usage( cl_cmd_t cmd );
....



== INTRODUCTION

Comlin provides low manifest command line option parsing and
deployment. The command line options are described in compact table
format and option values are stored to conveniently named
properties. Comlin builds command usage information based on the
option table (+ generic program info) and displays it automatically
if necessary. Comlin supports also subcommands.


== USAGE EXAMPLES

Two simple examples are presented in this section. First one
includes a straight forward command definition and the second is a
bit more complicated with subcommand feature in use.

== Simple example

Below is a small example program ("comlin_simple") that demonstrates
typical usage.

=== Program listing

....
#include <stdio.h>
#include <comlin.h>

int main( int argc, char** argv )
{
    cl_opt_t opt;

    /* Specify program and all the options. Parsing and help is managed
       automatically. */
    cl_command( "comlin_simple",
                "Programmer",
                "2018",
                { CL_SINGLE, "file", "-f", "File argument." },
                { CL_SWITCH, "debug", "-d", "Enable debugging." } );

    /* Get handle of option "file". */
    opt = cl_opt( "file" );

    /* Print "file" option's properties. */
    printf( "Option \"%s\" is given: %d\n", opt->name, opt->given );

    /* Print "file" option's value if option was given. */
    if ( opt->given ) {
        char** value;

        printf( "Option \"%s\" values:\n", opt->name );

        value = opt->value;
        while ( *value ) {
            printf( "  %s\n", *value );
            value++;
        }
    }

    /* Print "debug" option's "given" property. */
    printf( "Option \"%s\" is given: %d\n", "debug", cl_given( "debug" ) );

    return 0;
}
....

First Comlin and other essential headers are included.

"cl_command" function takes 4 arguments:
....
  progname:       Name of the program (or command).
  author:         Author of the program.
  year:           Year (or any date) for the program.
  option table:   Description of the command options.
....

Each option table entry (row/sub-array) includes 4 fields and
specifies one option:

....
  [ type, name, mnemonic, doc ]
....

Two different types are present in the example::
  single: Single means that the option requires one argument (and
           only one).
  switch: Switch is an optional flag (default value is false).

Option name is used to reference the option value that user has
given.  The command line option values are stored
automatically. For example the file option value is returned by
(array with NULL termination):

....
  opt->value
....

or without the option reference directly by option name:

....
  cl_value( "file" )
....

A single value can be directly accessed with:

....
  opt->value[0]
....


The option name also doubles as long option format, i.e. one could
use "--file <filename>" on the command line.

Existence of optional options can be tested using the "given"
function. For example:

....
  cl_given( "debug" )
....

would return "non-null" if "-d" was given on the command line.

Mnemonic is the short form option specification e.g. "-f". If short
form is replaced with "NULL", the long option format is only
available.

Doc includes documentation for the option. It is displayed when
"help" ("-h") option is given. Help option is added to the command
automatically as default behavior.


=== Simple example executions

Normal behavior would be achieved by executing:

....
  shell> comlin_simple -f example -d
....

The program would execute with the following output:

....
  Option "file" is given: 1
  Option "file" values:
    example
  Option "debug" is given: 1
....

Same output would be achieved with:

....
  shell> comlin_simple --file example --debug
....

Since option name doubles as long option.

Comlin includes certain "extra" behavior out-of-box. Required
arguments are checked for existence and error is displayed if
arguments are not given.

For example given the command:

....
  shell> comlin_simple
....

The following is displayed on the screen:

....
 comlin_simple error: Option "-f" missing for "comlin_simple"...
 
   Usage:
   comlin_simple -f <file> [-d]

   -f          File argument.
   -d          Enable debugging.
 
 
   Copyright (c) 2018 by Programmer
....

Missing option error is displayed since "file" is a mandatory
option. The error message is followed by "usage" display (Usage
Help). Documentation string is taken from the option specification to
"usage" display.

Given the command:
....
  shell> comlin_simple -h
....

would display the same "usage" screen except without the error
line.



== Subcommand example

Subcmd example includes a program which has subcommands. Subcommands
can have their own command line switches and options.

=== Program listing

....
#include <stdio.h>
#include <comlin.h>


/**
 * Hierarchically show results for options.
 */
void display_options( cl_cmd_t cmd )
{
    cl_cmd_t subcmd;
    cl_opt_p opts, *o;

    printf( "Options for: %s\n", cmd->name );

    opts = cmd->opts;
    while ( *opts ) {
        o = *opts;

        printf( "  Given \"%s\": %s\n", o->name, o->given ? "true" : "false" );

        if ( o->given && o->value ) {
            printf( "  Value \"%s\": ", o->name );
            cl_display_values( stdout, o );
            printf( "\n" );
        }

        opts++;
    }

    subcmd = cl_cmd_given_subcmd( cmd );
    if ( subcmd )
        display_options( subcmd );
}


int main( int argc, char** argv )
{
    cl_maincmd( "comlin_subcmd",
                "Comlin Tester",
                "2018",
                { CL_SUBCMD, "add", NULL, "Add file to repo." },
                { CL_SUBCMD, "rm", NULL, "Remove file from repo." }, );

    cl_subcmd( "add",
               "comlin_subcmd",
               { CL_SWITCH, "force", "-fo", "Force operation." },
               { CL_OPT_SINGLE, "password", "-p", "User password." },
               { CL_OPT_SINGLE, "username", "-u", "Username." },
               { CL_SINGLE, "file", "-f", "File." } );

    cl_subcmd( "rm",
               "comlin_subcmd",
               { CL_SWITCH, "force", "-fo", "Force operation." },
               { CL_OPT_SINGLE, "file", "-f", "File." } );

    cl_finish();

    display_options( cl_cmd );

    if ( cl_cmd->external ) {
        char**    value;
        mc_bool_t first = mc_true;

        printf( "External: [" );

        value = cl_cmd->external;

        while ( *value ) {
            if ( !first )
                printf( ", " );
            printf( "\"%s\"", *value );
            first = mc_false;
            value++;
        }

        printf( "]\n" );
    }

    return 0;
}
....

"cl_maincmd" function defines a program (command) with possible
subcommands. Program name, author and date are provided as
parameters. The rest of the parameters defined the options and/or
subcmds.

The "cl_subcmd" functions define subcommands for the parent
command. This example includes one subcommand level, but multiple
levels are allowed.

"cl_finish" is marker for complete program options definion. It
will start parsing and checking for options. After "cl_finish"
the user can query the options.

Main (root) commands can be referenced through variables:
....
  cl_main or cl_cmd
....

The subcommands can be referenced through "cl_main" (etc.)

....
  cl_given_subcmd
....

or by name

....
  cl_subcmd( "add" )
....

The queries have too versions: "cl_<query>" and
"cl_cmd_<query>". For "cl_<query>" it is assumed that the query
is targeted to cl_main. For "cl_cmd_<query>" the first argument
is always a "cl_cmd_t" which defines the scope of query.


=== Subcommand example executions

Normal behavior would be achieved by executing:

....
  shell> comlin_subcmd add -fo -f example
....

The program would execute with the following output:
....
  Options for: comlin_subcmd
    Given "help": false
    Given "add": true
    Given "rm": false
  Options for: add
    Given "help": false
    Given "force": true
    Given "password": false
    Given "username": false
    Given "file": true
    Value "file": example
....


Help is automatically provided on each command level, thus these are
both valid.
....
  shell> comlin_subcmd -h
....
and
....
  shell> comlin_subcmd rm -h
....


== Option specification

=== Overview

Option specification includes the minimum set of information
required for command line parsing. It is used to:

  Parse the command line.

  Check for wrong options and report.

  Check for mandatory arguments and report.

  Set the options given/non-given state.

  Set the options value. Array/String for all except no value for
  switches (check given property instead).

  Generate Usage Help printout.


=== Option types

The following types can be defined for the command line options:

CL_SUBCMD::
    Subcmd option. Subcmd specific options are provided separately.

CL_SWITCH::
    Single switch option (no arguments).

CL_SINGLE::
    Mandatory single argument option.

CL_MULTI::
    Mandatory multiple argument option (one or many). Option values in
    array.

CL_OPT_SINGLE::
    Optional single argument option.

CL_OPT_MULTI::
    Optional multiple argument option (one or many). Option values in
    array.

CL_OPT_ANY::
    Optional multiple argument option (also none accepted). Option
    values in array.

CL_DEFAULT::
    Default option (no switch associated). Name and option String
    values can be left out, since only the document string is
    used. Default option is referred with NULL for name.

CL_EXCLUSIVE::
    Option that does not coexist with other options.

CL_SILENT::
    Switch Option that is not displayed as an option in Usage Help
    display.


Options use all the 4 option fields:
....
  [ type, name, mnemonic, doc ]
....

"type" field is mandatory for all options.

"name" field is also mandatory for all options. "mnemonic" can be
left out (set to NULL), but then option accepts only long option format.

"CL_DEFAULT" uses only "doc" and "CL_SUBCMD" doesn't use the "mnemonic"
field. Those fields should be set to "NULL", however.

"CL_MULTI", "CL_OPT_MULTI", and "CL_OPT_ANY" option arguments are
terminated only when an option specifier is found. This can be a
problem if "CL_DEFAULT" option follows. The recommended solution is to
use a "CL_SILENT" option that can be used to terminate the argument
list. For example:

....
  { CL_SILENT, "terminator", "-", "The terminator." },
....


=== Option type primitives

Comlin converts option types into option type primitives. Option types
are not completely orthogonal, but primitives are.

Primitives:

CL_P_NONE::
    No arguments (i.e. switch).

CL_P_ONE::
    One argument.

CL_P_MANY::
    More than one argument.

CL_P_OPT::
    Optional argument(s).

CL_P_DEFAULT::
    Default option.

CL_P_MUTEX::
    Mutually exclusive option.

CL_P_HIDDEN::
    Hidden option (no usage doc).

Types to primitives mapping:

CL_P_SWITCH::
    CL_P_NONE, CL_P_OPT
    
CL_P_SINGLE::
    CL_P_ONE
    
CL_P_MULTI::
    CL_P_ONE, CL_P_MANY
    
CL_P_OPT_SINGLE::
    CL_P_ONE, CL_P_OPT
    
CL_P_OPT_MULTI::
    CL_P_ONE, CL_P_MANY, CL_P_OPT
    
CL_P_OPT_ANY::
    CL_P_NONE, CL_P_ONE, CL_P_MANY, CL_P_OPT
    
CL_P_DEFAULT::
    CL_P_NONE, CL_P_ONE, CL_P_MANY, CL_P_OPT, CL_P_DEFAULT
    
CL_P_EXCLUSIVE::
    CL_P_NONE, CL_P_ONE, CL_P_MANY, CL_P_OPT, CL_P_MUTEX
    
CL_P_SILENT::
    CL_P_NONE, CL_P_OPT, CL_P_HIDDEN
    
Primitives can be used in place of types if exotic options are
needed. Instead of a single type, ored combination of primitives
are given for option type. Order of primitives is not significant.

For example:
....
  { CL_P_NONE | CL_P_HIDDEN | CL_P_OPT,
    "terminator", "-", "The terminator." },
....

Comlin does not check the primitive combinations, thus care and
consideration should be applied.


=== Option specification function configuration

Option behavior can be controlled with several configuration options.

The configuration options are set by execution configuration
function. These are the called after option has been specified and
before cl_finish. Setting the configuration at "cl_maincmd"
will propagate the config options to all the subcommands as
well. Configuration can be given to each subcommand separately to
override the inherited config values. Subcommand settings are not
inherited, but apply only in the subcommand.

The usable configuration keys:

autohelp::
    Add help option automatically (default: true). Custom help option
    can be provided and it can be made also visible to user.

header::
    Header lines before standard usage printout.

footer::
    Footer lines after standard usage printout.

subcheck::
    Automatically check that a subcommand is provided (default: true).

check_missing::
    Check for missing arguments (default: true).

check_invalid::
    Error for unknown options (default: true).

tab::
    Tab stop column for option documentation (default: 12).

help_exit::
    Exit program if help displayed (default: true).



== Option referencing

=== Existence and values

cl_opt_t includes the parsed option values. All options can be
tested whether they are specified on the command line using:

....
  cl_given( "name" )
....

or

....
  cl_cmd_given( cmd, "name" )
....

Provided value(s) is returned by:

....
  cl_value( "name" )
....

or

....
  cl_cmd_value( cmd, "name" )
....

For "CL_SWITCH" there is no value and for the other types they are
string (array of one) or an array of multiple strings.

With "CL_OPT_ANY" type, the user should first check if the option was given:

....
  cl_cmd_given( cmd, "many_files_or_none" )
....

Then check how many arguments where given, and finally decide what
to do. The value array is terminated with NULL. The number of
values are also stored to "valuecnt" field in cl_opt_t struct.

Header file "comlin.h" includes user definitions and documentation
for user interface functions.


=== Subcommand options

The given subcommand for the parent command is return by
"cl_given_subcmd" or "cl_cmd_given_subcmd". Commonly the
program creator should just check directly which subcommand has
been selected and check for any subcommand options set.


=== Program external options

If the user gives the "\--" option (double-dash), the arguments after
that option is stored as an array to "cl_external".


== Customization

If the default behavior is not satisfactory, changes can be
implemented simply by complementing the existing functions. Some
knowledge of the internal workings of Comlin is required though.


== AUTHOR

*comlin* was originally written by Tero Isannainen.
